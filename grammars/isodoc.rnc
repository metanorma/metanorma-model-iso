# instantiations of this grammar may replace leaf strings
# with more elaborated types; e.g. title (text) replaced with
# title-main, title-intro, title-part; type replaced with
# enum.
#
# some renaming at leaf nodes is permissible
#
# obligations can change both from optional to mandatory,
# and from mandatory to optional; optional elements may
# be omitted; freely positioned alternatives may be replaced
# with strict ordering
#
# DO NOT introduce a namespace here. We do not want a distinct namespace
# for these elements, and a distinct namespace for any grammar inheriting
# these elements; we just want one namespace for any child grammars
# of this.

grammar {

include "reqt.rnc" { }

include "basicdoc.rnc" { 

amend = element amend {
  BlockAttributes,
  AmendType,
  autonumber*
}

AdmonitionAttr =
    attribute type { AdmonitionType },
    attribute class { text }?,
    attribute uri { xsd:anyURI }?,
    attribute coverpage { xsd:boolean }?,
    attribute notag { xsd:boolean }?

AdmonitionType = 
  "warning" | "note" | "tip" | "important" | "caution" | "statement" | "editorial" | "box"

index = element index {
  attribute to { xsd:IDREF }?,
  element primary { (PureTextElement|stem)+ },
  element secondary { (PureTextElement|stem)+ }?,
  element tertiary { (PureTextElement|stem)+ }?
}

## Title(s) of a clause
section-title =
  ## Title proper for a clause
  element title { TextElement* },
  ## Alternate title for a clause
  element variant-title { TypedTitleString }*

hyperlink =
  element link {
    attribute target { xsd:anyURI },
    attribute type { ReferenceFormat }?,
    attribute alt { text }?,
    attribute update-type { xsd:boolean }?,
    attribute style { text }?,
    PureTextElement+
}

xref =
  element xref {
     XrefAttributes,
     XrefBody
}

erefType =
    attribute normative { xsd:boolean }?,
    attribute citeas { text },
    attribute type { ReferenceFormat }?,
    attribute alt { text }?,
    attribute case { "capital" | "lowercase" }?,
    attribute droploc { xsd:boolean }?,
    attribute style { text }?,
    CitationType,
    PureTextElement+

UlAttr =
    BlockAttributes

UlBody =
    tname?, ul_li+, note*

OlBody =
    tname?, li+, note*

OlAttr =
    BlockAttributes,
    attribute type { ( "roman" | "alphabet" | "arabic" |
                       "roman_upper" | "alphabet_upper" ) }?

DlAttr =
    BlockAttributes,
    attribute key { xsd:boolean }?

DlBody =
    tname?, (dt, dd)+, note*

dt =
  element dt { 
    OptionalId,
    TextElement*
  }

ExampleAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute subsequence { text }?,
    attribute number { text }?,
    BlockAttributes

ExampleBody =
    tname?,
    ( formula | ul | ol | dl | quote | sourcecode | paragraph-with-footnote | figure )+,
    note*

TableAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute number { text }?,
    attribute subsequence { text }?,
    attribute alt { text }?,
    attribute summary { text }?,
    attribute uri { xsd:anyURI }?,
    attribute width { text }?,
    BlockAttributes

TableBody =
    colgroup?, tname?, thead?, tbody, tfoot?, dl?, table-note*, source*

FigureAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute number { text }?,
    attribute subsequence { text }?,
    attribute class { text }?,
    attribute width { text }?,
    BlockAttributes

FigureBody =
     tname?, (image | video | audio | pre | paragraph-with-footnote+ | figure*), fn*, dl?, note*, source*

source =
  element source {
    attribute status { SourceStatusType },
    origin, modification?
} 

SourceAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute number { text }?,
    attribute subsequence { text }?,
    attribute lang { LanguageType }?,
    BlockAttributes,
    attribute linenums { xsd:boolean }?

SourceBody =
    tname?, ( text | callout | xref | eref )+, annotation*, note*

FormulaAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute number { text }?,
    attribute subsequence { text }?,
    attribute inequality { xsd:boolean }?,
    BlockAttributes

ParagraphAttrs =
    attribute align { Alignments }?,
    attribute type { text }?,
    BlockAttributes

QuoteAttr =
    attribute alignment { Alignments }?,
    BlockAttributes

# TitleType = text

sections =
  element sections {
    ( clause | terms | term-clause | definitions | floating-title )+
}

## Bibliography clause. It is used to collate references within the document, where
## there could be one or more of such sections within a document. For example, some standardization documents differentiate
## normative or informative references, some split references into sections organized by concept relevance.
references =
  element references {
    attribute id { xsd:ID }?,
    attribute obligation { ObligationType }?,
    ## Whether this is a normative references section or informative (bibliography). Not the same as obligation:
    ## Normative References contents contain normative references, but as a clause in the document, they are informative.
    attribute normative { xsd:boolean },
    section-title?,
    ## Prefatory text
    BasicBlock*,
    (
      ## Bibliographic item cited in the document
      doc_bibitem,
      ## Annotation of the bibliographic item
      note*)*,
    references*
}

NoteAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute number { text }?,
    attribute subsequence { text }?,
    attribute type { text }?,
    attribute coverpage { xsd:boolean }?,
    attribute notag { xsd:boolean }?,
    BlockAttributes

NoteBody =
    (paragraph | ul | ol | dl | formula | quote | sourcecode)+

Basic-Section =
    attribute id { xsd:ID }?,
    attribute language { LanguageType }?,
    attribute script { ScriptType }?,
    attribute obligation { ObligationType }?,
    section-title?,
    (BasicBlock+)

LiBody =
    BasicBlock+
    # exclude figures?

dd =
  element dd {
    # exclude figures?
    BasicBlock*
  }

thead = element thead { tr+ }

TdBody =
    (
      (TextElement | fn )* |
      (paragraph-with-footnote | dl | ul | ol | figure)+
    )

ThBody =
    (
      (TextElement | fn )* |
      paragraph-with-footnote+
    )

table-note = element note {
    attribute id { xsd:ID }?,
    paragraph
}

stem =
  element stem {
    attribute type { "MathML" | "AsciiMath" | "LatexMath" },
    attribute number-format { text }?,
    attribute block { xsd:boolean },
     ( text | AnyElement )+
} 

em = element em { (PureTextElement|stem|index|index-xref|eref|erefstack|xref|hyperlink)* }
strong = element strong { (PureTextElement|stem|index|index-xref|eref|erefstack|xref|hyperlink)* }
tt = element tt { (PureTextElement|index|index-xref|eref|erefstack|xref|hyperlink)* }
keyword = element keyword { (PureTextElement|index|index-xref)* }
strike = element strike { (PureTextElement|index|index-xref)* }
underline = element underline { (PureTextElement|index|index-xref)* }
smallcap = element smallcap { (PureTextElement|index|index-xref)* }
sub = element sub { (PureTextElement|stem)* }
sup = element sup { (PureTextElement|stem)* }

pagebreak = element pagebreak { 
  attribute orientation { "landscape" | "portrait" }?
}

}

# end overrides

## Two-letter language code taken from ISO-639, indicating the language in which the content is written
LanguageType = text

## Four-letter script code taken from ISO-15924, indicating the script in which the content is written
ScriptType = text

## The force of a clause in a standard document: whether it has normative or informative effect
ObligationType = "normative" | "informative"

doc_bibitem =
  element bibitem {
     attribute id { xsd:ID },
     attribute hidden { xsd:boolean }?,
     attribute suppress_identifier { xsd:boolean }?,
     ReducedBibliographicItem
}


image |=
  element svg {
     ( text | AnyElement )+
}

BasicBlock |= columnbreak

columnbreak = element columnbreak { empty }

MultilingualRenderingType = "common" | "all-columns" | "parallel" | "tag"

colgroup = element colgroup { col+ }

col = element col {
    attribute width { text }
}

BibItemType |= "internal"

TextElement |= concept | add | del | span | erefstack | date_inline
PureTextElement |= passthrough_inline

passthrough_inline = element passthrough {
        attribute formats { text }?,
        text
}

add = element add { PureTextElement | eref | erefstack | stem | keyword | xref | hyperlink | index | index-xref }
del = element del { PureTextElement | eref | erefstack | stem | keyword | xref | hyperlink | index | index-xref }
span = element span {
  attribute class { text }?,
  attribute style { text }?,
  attribute custom-charset { text }?,
  TextElement+
}

date_inline = element date {
  attribute value { text },
  attribute format { text }?,
  attribute language { LanguageType }?,
  attribute script { ScriptType }?,
  attribute locale { text }?
}

concept = element concept {
  attribute bold { xsd:boolean }?,
  attribute ital { xsd:boolean }?,
  attribute ref { xsd:boolean }?,
  attribute linkmention { xsd:boolean }?,
  attribute linkref { xsd:boolean }?,
  element refterm { (PureTextElement|stem|index|index-xref)* }?,
  element renderterm { (PureTextElement|stem|index|index-xref)* }?,
  ( eref | erefstack | xref | termref )
}

BasicBlock |= requirement | recommendation | permission | imagemap | svgmap | inputform | toc | passthrough

toc = element toc {
   ( ul )
}

passthrough = element passthrough {
    attribute formats { text }?,
    text
}

inputform = element form {
    attribute id { xsd:ID },
    attribute name { text },
    attribute action { text },
    attribute class { text }?,
    BlockAttributes,
    ( TextElement | FormInput )*
}

FormInput = input | formlabel | select | textarea

InputType = "button" | "checkbox" | "date" | "file" | "password" | "radio" | "submit" | "text"

input = element input {
    attribute type { InputType },
    attribute checked { xsd:boolean }?,
    attribute disabled { xsd:boolean }?,
    attribute readonly { xsd:boolean }?,
    attribute maxlength { xsd:int }?,
    attribute minlength { xsd:int }?,
    attribute name { text }?,
    attribute value { text }?,
    attribute id { xsd:ID }?
}

formlabel = element label {
    attribute for { xsd:IDREF },
    PureTextElement*
}

select = element select {
    attribute name { text }?,
    attribute value { text }?,
    attribute id { xsd:ID }?,
    attribute disabled { xsd:boolean }?,
    attribute multiple { xsd:boolean }?,
    attribute size { xsd:int }?,
    option+
}

option = element option {
    attribute disabled { xsd:boolean }?,
    attribute value { text }?,
    PureTextElement*
}

textarea = element textarea {
    attribute name { text }?,
    attribute value { text }?,
    attribute id { xsd:ID }?,
    attribute rows { xsd:int }?,
    attribute cols { xsd:int }?
}

bibliography =
  element bibliography {
    (references | reference-clause)+
}

Section-Attributes =
    attribute id { xsd:ID }?,
    attribute language { LanguageType }?,
    attribute script { ScriptType }?,
    attribute inline-header { xsd:boolean }?,
    attribute number { text }?,
    attribute branch-number { text }?,
    attribute obligation { ObligationType }?

reference-clause =
  element clause {
    Section-Attributes,
    section-title?,
    BasicBlock*,
    (
       reference-clause+ | references*
    )
}

Root-Attributes =
  ## Version number of the gem used to generate this document
  attribute version { text },
  ## Version number of the schema that this document is aligned to
  attribute schema-version { text },
  ## Type of standards document representation. "Semantic" is the core representation of content.
  ## "Presentation" manipulates and enhances the representation for rendering needs.
  attribute type { "semantic" | "presentation" }

## Representation of a standardisation document
standard-document =
element standard-document {
  Root-Attributes,
  ## Bibliographic description of the document itself, expressed in the Relaton model
  bibdata, 
  ## Extension point for extraneous elements that need to be added to standards document as data
  misccontainer?, 
  ## Front matter that is repeated at the start of documents issued from an SDO, with content not specific to the document
  boilerplate?, 
  ## Prefatory sections
  preface?, 
  ## Main body of document
  sections, 
  ## Annex sections
  annex*, 
  ## Bibliographic sections
  bibliography?, 
  ## Index of the document
  indexsect*, 
  ## Colophon or postface material
  colophon?
}

## Elements added to metanorma-extension are open-ended, and constitute source data
misccontainer = element metanorma-extension { AnyElement+ }

preface =
  element preface { ( content | abstract | foreword | introduction | acknowledgements)+ }

colophon =
  element colophon { content+ }

## Foreword of document
foreword =
  element foreword { Content-Section }

## Introduction of document
introduction =
  element introduction { Content-Section }

indexsect = element indexsect { Content-Section }

## Content addressing legal and licensing concerns around the document, outside of the main flow of document content
boilerplate = 
  element boilerplate { 
     ## Preset templated text provided by the standardization body, describing the copyright status of the document
     copyright-statement?, 
     ## Preset templated text provided by the standardization body, providing the licensing terms for the document content
     license-statement?, 
     ## Preset templated text provided by the standardization body, providing the legal constraints and considerations around use of the document
     legal-statement?, 
     ## Preset templated text provided by the standardization body, providing information on where feedback on the document may be addressed to
     feedback-statement? 
}

copyright-statement =
  element copyright-statement { Content-Section }

license-statement =
  element license-statement { Content-Section }

legal-statement =
  element legal-statement { Content-Section }

feedback-statement =
  element feedback-statement { Content-Section }

## One or more definition lists, used to define symbols and abbreviations used in the remainder of the document.
## These can also be used as glossaries, with simple definitions, in contrast to the more elaborate definitions given in
## terms sections 
definitions =
  element definitions {
    attribute id { xsd:ID }?,
    attribute language { LanguageType }?,
    attribute script { ScriptType }?,
    attribute type { text }?,
    attribute obligation { ObligationType }?,
    section-title?,
    (
      ## Prefatory material, may be specific to each definition list
      BasicBlock*,
      ## Definition list containing symbols and abbreviations
      dl
    )+
}

content =
  element clause { Content-Section }

## Abstract of a document, presented as a clause
abstract =
  element abstract { Content-Section }

## Acknowledgements of a document, presented as a clause
acknowledgements =
  element acknowledgements { Content-Section }

content-subsection =
  element clause { Content-Section }

## Unnumbered clause with no semantic specialisation, used in preface of document
Content-Section =
    Section-Attributes,
    attribute type { text }?,
    section-title?,
    ( (BasicBlock*),
      content-subsection* )

clause =
  element clause { Clause-Section }

## Strictly hierarchical clause: all textual content belongs in a strict clause hierarchy. such that no blocks of text
## are siblings to subclauses (hanging paragraphs)
Clause-Section =
    Section-Attributes,
    ## Semantic class of the clause, e.g. "scope"
    attribute type { text }?,
    section-title?,
    (
      ## Block content, mutually exclusive  with subclauses
      ( (  BasicBlock+ ) | amend ) |
      # Subclauses, can include terms and definitions
       (clause-subsection | terms | definitions | floating-title )+
    )

## Clause constituting an annex or appendix
Annex-Section =
    Annex-Section-Attr,
    Annex-Section-Body

Annex-Section-Attr =
    attribute id { xsd:ID }?,
    attribute language { LanguageType }?,
    attribute script { ScriptType }?,
    attribute inline-header { xsd:boolean }?,
    attribute obligation { ObligationType }?,
    attribute type { text }?

Annex-Section-Body =
    section-title?,
    (
      ## Hanging paragraphs: Annexes permit top-level blocks that are not part of a subsection
      ( BasicBlock* ),
      ## Subclauses of the annex: these can include terms, definitions, and references
       (annex-subsection | terms | definitions | references | floating-title )*
    )

clause-subsection =
  element clause { Clause-Section }

annex-subsection =
  element clause { Annex-Section }

annex =
  element annex { Annex-Section }       

terms =
  element terms {
    Section-Attributes,
    attribute type { text }?,
    section-title?,
    BasicBlock*,
    ( (term | terms)+ | ( terms*, definitions?) )
  }

term =
  element term {
    attribute id { xsd:ID }?,
    attribute language { LanguageType }?,
    attribute script { ScriptType }?,
    BlockAttributes,
    preferred+, admitted*, deprecates*, related*,
    termdomain?, termsubject?, 
    termdefinition+, termnote*, termexample*, termsource*
  }

preferred =
  element preferred { Designation }

admitted =
  element admitted { Designation }

related = 
  element related {
    attribute type { RelatedTermType },
    element preferred { Designation },
    ( eref | erefstack | xref | termref )
}

RelatedTermType = 
  "deprecates" | "supersedes" | "narrower" | "broader" | "equivalent" | "compare" | "contrast" | "see" | "seealso"

deprecates =
  element deprecates { Designation }

Designation = 
  attribute absent { xsd:boolean }?,
  attribute geographic-area { text }?,
  (expression_designation | letter_symbol_designation | graphical_symbol_designation ),
  fieldofapplication?, usageinfo?,
  termsource*

fieldofapplication =
  element field-of-application { PureTextElement+ }

usageinfo =
  element usage-info { PureTextElement+ }

letter_symbol_designation =
  element letter-symbol {
    attribute isInternational { xsd:boolean }?,
    attribute type { "letter" | "symbol" | "formula" | "equation" }?,
    element name { (PureTextElement | stem)+ }
  }

graphical_symbol_designation =
  element graphical-symbol {
    attribute isInternational { xsd:boolean }?,
    figure
  }

expression_designation =
  element expression {
    attribute language { LanguageType }?,
    attribute script { ScriptType }?,
    attribute type { ExpressionDesignationType }?,
    attribute isInternational { xsd:boolean }?,
    element name { (PureTextElement|stem|index)* },
    element abbreviation-type { AbbreviationType }?,
    element pronunciation { LocalizedString }?,
    element grammar { Grammar }?
  }

ExpressionDesignationType = "prefix" | "suffix" | "abbreviation" | "full"

AbbreviationType = "truncation" | "acronym" | "initialism"

Grammar =
  element gender { GrammarGender }*,
  element number { GrammarNumber }*,
  element isPreposition { xsd:boolean }?,
  element isParticiple { xsd:boolean }?,
  element isAdjective { xsd:boolean }?,
  element isVerb { xsd:boolean }?,
  element isAdverb { xsd:boolean }?,
  element isNoun { xsd:boolean }?,
  element grammar-value { text }*

GrammarGender = "masculine" | "feminine" | "neuter" | "common"

GrammarNumber = "singular" | "dual" | "plural"
  
termdomain =
  element domain { TextElement+ }

termsubject =
  element subject { TextElement+ }

termdefinition =
  element definition {
    attribute type { text }?,
    (verbaldefinition | nonverbalrep | (verbaldefinition, nonverbalrep))
  }

verbaldefinition = element verbal-definition {
    (paragraph | dl | ol | ul | table | figure | formula)+,
    termsource*
}

nonverbalrep =
  element non-verbal-representation {
    ( table | figure | formula )+,
    termsource*
}

termnote =
  element termnote { 
    attribute id { xsd:ID },
    attribute unnumbered { xsd:boolean }?,
    attribute number { text }?,
    attribute subsequence { text }?,
    BlockAttributes,
    (paragraph | ul | ol | dl | formula)+
}

termexample =
  element termexample { 
    attribute id { xsd:ID },
    BlockAttributes,
    ( formula | ul | ol | dl | quote | sourcecode | paragraph | figure )+
}

termsource =
  element termsource {
    attribute status { SourceStatusType },
    attribute type { ( "authoritative" | "lineage" ) },
    origin, modification?
}

SourceStatusType = "identical" | "modified" | "adapted" | "restyled" | "context-added" |
  "generalisation" | "specialisation" | "unspecified"

origin =
  element origin { erefType | termref }

modification =
  element modification { paragraph }

termref = element termref {
  attribute base { text },
  attribute target { text },
  text?
}

term-clause =
  element clause {
    attribute id { xsd:ID }?,
    attribute language { LanguageType }?,
    attribute script { ScriptType }?,
    attribute inline-header { xsd:boolean }?,
    attribute obligation { ObligationType }?,
    section-title?,
    BasicBlock*,
    (
       (term-clause | terms | definitions)*
    )
}

termdocsource =
  element termdocsource { CitationType }

autonumber =
  element autonumber {
    attribute type { "requirement" | "recommendation" | "permission" | "table" | "figure" | "admonition" | "formula" | "sourcecode" | "example" | "note" },
    text
}

imagemap = element imagemap {
    BlockAttributes,
  figure, 
  element area {
    attribute type { "rect" | "circle" | "ellipse" | "poly" },
    ( xref | hyperlink | eref | erefstack ),
    element coords {
      attribute x { xsd:float },
      attribute y { xsd:float }
    }+,
    element radius {
      attribute x { xsd:float },
      attribute y { xsd:float }?
    }?
  }*
}

svgmap = element svgmap {
    BlockAttributes,
  figure,
  element target {
     attribute href { xsd:anyURI },
    ( xref | hyperlink | eref | erefstack )
  }*
}

ul_li =
  element li {
    attribute id { xsd:ID }?,
    attribute uncheckedcheckbox { xsd:boolean }?,
    attribute checkedcheckbox { xsd:boolean }?,
    BasicBlock+
}

## A floating title, outside of the clause hierarchy of the document
floating-title =
  element floating-title {
    attribute id { xsd:ID },
    ## The ostensive depth of the floating title in the clause hierarchy: which level heading it should be presented as
    attribute depth { xsd:int },
    ## Textual content of the floating title
    TextElement*
}

XrefAttributes =
     attribute target { xsd:string { pattern = "\i\c*|\c+#\c+" }},
     attribute to { xsd:string { pattern = "\i\c*|\c+#\c+" }}?,
     attribute type { ReferenceFormat }?,
     attribute alt { text }?,
     attribute case { "capital" | "lowercase" }?,
     attribute droploc { xsd:boolean }?,
     attribute style { XrefStyleType }?,
     attribute label { text }?

XrefBody =
     XrefTarget*,
     PureTextElement+

XrefConnectiveType = "and" | "or" | "from" | "to" | ""

XrefTarget =
  element location {
    attribute target { xsd:string { pattern = "\i\c*|\c+#\c+" }},
    attribute connective { XrefConnectiveType }
}

XrefStyleType = "basic" | "full" | "short" |"id" | text

erefTypeWithConnective =
    attribute connective { XrefConnectiveType }?,
    erefType

erefstack = element erefstack {
    element eref { erefTypeWithConnective }+
}

BlockAttributes =
    attribute keep-with-next { xsd:boolean }?,
    attribute keep-lines-together { xsd:boolean }?,
    attribute tag { text }?,
    attribute multilingual-rendering { MultilingualRenderingType }?,
    attribute columns { text }?

start = standard-document
}
