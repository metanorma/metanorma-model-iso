grammar {

include "isodoc.rnc" { 

  Root-Attributes |=
    ## Every document contained in a Metanorma collection has all its anchors and references to anchors
    ## (xsd:ID, xsd:IDREF) suffixed with a unique identifier,
    ## derived from the document identifier, so that instances of the same anchor in different documents
    ## are deduplicated within the one document; so if two documents, ISO 1 and ISO 2, are in the collection 
    ## and each contain the anchor xyz, that anchor is converted to xyz_ISO_1 for ISO 1, and xyz_ISO_2 for ISO 2.
    ## The anchor suffix used for that document is included at the root of the document, so that it can be
    ## recovered.
    attribute document_suffix { xsd:ID }
}

## A collection of Metanorma documnts
collection = element collection {
  ## Bibliographic description of the document collection, expressed in the Relaton model
  bibdata,
  directive*,
  manifest,
  collection_format*,
  output_folder?,
  coverpage?,
  compile-options?,
  prefatory-content?,
  doc-container+,
  final-content?
}

## Metanorma content, to be rendered as the preface to the collection proper
prefatory-content = 
  ( clause | floating-title )+

## Metanorma content, to be rendered as the postface to the collection proper
final-content = 
  ( clause | floating-title | bibliography )+

## Container for a Metanorma document
doc-container =
  element doc-container {
     RequiredId,
     ## The Metanorma XML document; the root name changes according to the flavour, as is the normal case for Metanorma.
     ## All cross-references to other files in the same collection (as identified in the bibliographies of each document)
     ## are resolved into hyperlinks to the other files; this includes references in SVG maps.
     standard-document?
}

## Directive for Metanorma compilation: see https://www.metanorma.org/author/topics/collections/configuration/ 
## for documentation.
directive = element directive {
  element key { text },
  element value { text }
}

## Format to output the collection as: xml, presentation, html, doc, pdf.
## See https://www.metanorma.org/author/topics/collections/configuration/ 
collection_format = element format { text }

## The local output folder in which the collection will be generated, as a file path.
output_folder = element output_folder { text }

## The cover page for the collection, as a file name. This is an HTML file consisting of a Liquid template
## that takes the collection manifest as its input. It is intended to provide navigation to the collection contents:
## every node of the manifest with entry/@index = true is represented, and 
coverpage = element coverpage { text }

## Metanorma document compilation options applied to the collection
compile-options = element compile {
  ## Install fonts used in the documents
  element install_fonts { xsd:boolean },
  ## Agree to terms for font installation without user interaction
  element agree_to_terms { xsd:boolean }
}

## Manifest of the collection
manifest = element entry {
  ## The doc-container/@id referenced by this manifest entry, if it is a leaf node (describing a document)
  attribute target { xsd:IDREF }?,
  ## This node in the manifest is an attachment file (it is not to be parsed as a Metanorma document, but copied
  ## into the output directory as is)
  attribute attachment { xsd:boolean }?,
  ## This node in the manifest is a Metanorma document that is to be broken down into a collection in rendering,
  ## generating one document per clause of the original document
  attribute sectionsplit { xsd:boolean }?,
  ## This node in the manifest is to be included in the cover page table of contents/index of the collection
  attribute index { xsd:boolean }?,
  ## File path of the file being described, if this is a leaf node
  attribute fileref { text }?,
  ## URI to be used to reference this file in the document in cross-references, if this is a leaf node. Used in case the url 
  ## to be used is different from the filename given in fileref, for whatever reason
  attribute url { text }?,
  ## The document identifier of the file described, used for rendering of the manifest and for cross-referencing
  element identifier { text }?,
  element type { text }?,
  ## Title of this node in the manifest structure
  element title { text }?,
  ## Bibliographic description of the document, copied out from the document itself (if this a leaf node),
  ## so that the manifest can access any needed metadata
  bibdata?,
  ## Recursive manifests, used to represent a tree structure of documents in the collection.
  ## Note that by contrast doc-container, the actual documents being referenced, is a flat list.
  ## This element only appears if the element is describing a branch of the collection structure;
  ## it does not appear if entry is a leaf node (describing a document)
  manifest*
}

start = collection

}
